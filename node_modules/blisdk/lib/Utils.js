"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var builder = require("botbuilder");
var util = require("util");
var request = require("request");
var Utils = (function () {
    function Utils() {
    }
    Utils.SendTyping = function (bot, address) {
        var msg = { type: 'typing' };
        msg.address = address;
        bot.send(msg);
    };
    /** Send a text message */
    Utils.SendMessage = function (bot, memory, content) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var address, session, message;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!memory) return [3 /*break*/, 3];
                        return [4 /*yield*/, memory.BotState.Address()];
                    case 1:
                        address = _a.sent();
                        return [4 /*yield*/, memory.BotState.Session(bot)];
                    case 2:
                        session = _a.sent();
                        if (typeof content !== 'string') {
                            session.send(content);
                        }
                        else {
                            message = new builder.Message()
                                .address(address)
                                .text(content);
                            session.send(message);
                        }
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    Utils.SendAsAttachment = function (context, content) {
        var base64 = Buffer.from(content).toString('base64');
        var msg = new builder.Message();
        msg.data.address = context.Address();
        var contentType = "text/plain";
        var attachment = {
            contentUrl: util.format('data:%s;base64,%s', contentType, base64),
            contentType: contentType,
            content: content
        };
        msg.addAttachment(attachment);
        context.bot.send(msg);
    };
    /** Handle that catch clauses can be any type */
    Utils.ErrorString = function (error, context) {
        if (context === void 0) { context = ""; }
        var prefix = context ? context + ": " : "**"; //TEMP
        try {
            if (!error) {
                return prefix + "Unknown";
            }
            else if (!error.body) {
                return prefix + JSON.stringify(error);
            }
            else if (error.body.message) {
                return prefix + error.body.message;
            }
            else if (error.body.errorMessages) {
                return prefix + error.body.errorMessages.join();
            }
            else if (typeof error.body == 'string') {
                return prefix + error.body;
            }
            else {
                return prefix + JSON.stringify(error.body);
            }
        }
        catch (e) {
            return prefix + ("Error Parsing Failed: " + Object.prototype.toString.call(e) + " " + JSON.stringify(e));
        }
    };
    Utils.ReadFromFile = function (url) {
        return new Promise(function (resolve, reject) {
            var requestData = {
                url: url,
                json: true,
                encoding: 'utf8'
            };
            request.get(requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(body.message);
                }
                else {
                    var model = String.fromCharCode.apply(null, body.data);
                    resolve(model);
                }
            });
        });
    };
    Utils.PrebuiltDisplayText = function (prebuiltType, resolution) {
        switch (prebuiltType) {
            case "builtin.datetimeV2.date":
                var date = resolution.values[0].value;
                if (resolution.values[1]) {
                    date += " or " + resolution.values[1].value;
                }
                return date;
            case "builtin.datetimeV2.time":
                var time = resolution.values[0].value;
                if (resolution.values[1]) {
                    time += " or " + resolution.values[1].value;
                }
                return time;
            case "builtin.datetimeV2.daterange":
                return resolution.values[0].start + " to " + resolution.values[0].end;
            case "builtin.datetimeV2.timerange":
                return resolution.values[0].start + " to " + resolution.values[0].end;
            case "builtin.datetimeV2.datetimerange":
                return resolution.values[0].start + " to " + resolution.values[0].end;
            case "builtin.datetimeV2.duration":
                return resolution.values[0].value + " seconds";
            case "builtin.datetimeV2.set":
                return "" + resolution.values[0].value;
            case "builtin.number":
                return resolution.value;
            case "builtin.ordinal":
                return resolution.value;
            case "builtin.temperature":
                return resolution.value;
            case "builtin.dimension":
                return resolution.value;
            case "builtin.money":
                return resolution.value;
            case "builtin.age":
                return resolution.value;
            case "builtin.percentage":
                return resolution.value;
            case "builtin.geography.city":
                return resolution.value;
            case "builtin.geography.country":
                return resolution.value;
            case "builtin.geography.pointOfInterest":
                return resolution.value;
            case "builtin.encyclopedia":
            default:
                return null;
        }
    };
    return Utils;
}());
exports.Utils = Utils;
//# sourceMappingURL=Utils.js.map