"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Restify = require("restify");
var BlisDebug_1 = require("../BlisDebug");
var BlisClient_1 = require("../BlisClient");
var BlisDialog_1 = require("../BlisDialog");
var BlisMemory_1 = require("../BlisMemory");
var XMLDom = require("xmldom");
var blis_models_1 = require("blis-models");
var blis_models_2 = require("blis-models");
var Server = (function () {
    function Server() {
    }
    // TEMP until we have an actual user
    Server.InitClient = function () {
        var user = "testuser";
        var secret = "none";
        var azureFunctionsUrl = "";
        var azureFunctionsKey = "";
        BlisClient_1.BlisClient.Init(user, secret, azureFunctionsUrl, azureFunctionsKey);
    };
    // Extract error text from HTML error
    Server.HTML2Error = function (htmlText) {
        try {
            // Parse html
            var parser = new XMLDom.DOMParser();
            var document_1 = parser.parseFromString(htmlText);
            var errorTitle = document_1.getElementById("stackpage");
            if (errorTitle) {
                return errorTitle.textContent.slice(0, 1500);
            }
            return htmlText;
        }
        catch (err) {
            return htmlText;
        }
    };
    // Parse error to return appropriate error message
    Server.HandleError = function (response, err) {
        // Generate error message
        var error = "";
        if (typeof err == "string") {
            error = err;
        }
        if (err.message && typeof err.message == "string") {
            error += err.message + "\n";
        }
        if (err.stack && typeof err.stack == "string") {
            error += err.stack + "\n";
        }
        if (err.body && typeof err.body == "string") {
            // Handle HTML error
            if (err.body.indexOf('!DOCTYPE html')) {
                error += this.HTML2Error(err.body);
            }
            else {
                error += err.body + "\n";
            }
        }
        if (err.body && err.body.errorMessages && err.body.errorMessages.length > 0) {
            error += err.body.errorMessages.join();
        }
        var statusCode = (err.statusCode ? err.statusCode : 500);
        response.send(statusCode, error);
        var log = error + "\n" + (err.request ? "BODY:" + err.request.body : null);
        BlisDebug_1.BlisDebug.Error(log);
    };
    Server.Init = function () {
        var _this = this;
        this.server = Restify.createServer();
        this.server.use(Restify.bodyParser());
        this.server.use(Restify.queryParser());
        //CORS
        this.server.use(Restify.CORS({
            origins: ['*'],
            credentials: true,
            headers: ['*']
        }));
        this.server.listen(5000, function (err) {
            if (err) {
                BlisDebug_1.BlisDebug.Error(err);
            }
            else {
                BlisDebug_1.BlisDebug.Log(_this.server.name + " listening to " + _this.server.url);
            }
        });
        //========================================================
        // State
        //=======================================================
        /** Sets the current active application */
        this.server.put("state/app", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var key, app, memory, error_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        this.InitClient(); // TEMP
                        key = req.params.key;
                        app = new blis_models_1.BlisAppBase(req.body);
                        memory = BlisMemory_1.BlisMemory.GetMemory(key);
                        return [4 /*yield*/, memory.BotState.SetApp(app)];
                    case 1:
                        _a.sent();
                        res.send(200);
                        return [3 /*break*/, 3];
                    case 2:
                        error_1 = _a.sent();
                        Server.HandleError(res, error_1);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        }); });
        //========================================================
        // Bot
        //========================================================
        /** Retrieves information about the running bot */
        this.server.get("/bot", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var callbacks, botInfo;
            return tslib_1.__generator(this, function (_a) {
                this.InitClient(); // TEMP
                try {
                    callbacks = Object.keys(BlisDialog_1.BlisDialog.apiCallbacks);
                    botInfo = new blis_models_1.BotInfo({ callbacks: callbacks });
                    res.send(botInfo);
                }
                catch (error) {
                    Server.HandleError(res, error);
                }
                return [2 /*return*/];
            });
        }); });
        //========================================================
        // App
        //========================================================
        /** Retrieves information about a specific application */
        this.server.get("/app/:appId", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var query, appId, app, error_2;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = req.getQuery();
                        appId = req.params.appId;
                        this.InitClient(); // TEMP
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.GetApp(appId, query)];
                    case 2:
                        app = _a.sent();
                        res.send(app);
                        return [3 /*break*/, 4];
                    case 3:
                        error_2 = _a.sent();
                        Server.HandleError(res, error_2);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); });
        /** Create a new application */
        this.server.post("/app", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var query, key, app, appId, error_3;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        this.InitClient(); // TEMP
                        query = req.getQuery();
                        key = req.params.key;
                        app = new blis_models_1.BlisAppBase(req.body);
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.AddApp(app, query)];
                    case 1:
                        appId = _a.sent();
                        res.send(appId);
                        // Initialize memory
                        return [4 /*yield*/, BlisMemory_1.BlisMemory.GetMemory(key).Init(appId)];
                    case 2:
                        // Initialize memory
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        error_3 = _a.sent();
                        Server.HandleError(res, error_3);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); });
        /** Renames an existing application or changes its LUIS key
         * Note: Renaming an application does not affect packages */
        this.server.put("/app/:appId", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var query, app, appId, error_4;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        this.InitClient(); // TEMP
                        query = req.getQuery();
                        app = new blis_models_1.BlisAppBase(req.body);
                        if (!app.appId) {
                            app.appId = req.params.appId;
                        }
                        else if (req.params.appId != app.appId) {
                            return [2 /*return*/, next(new Restify.InvalidArgumentError("AppId of object does not match URI"))];
                        }
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.EditApp(app, query)];
                    case 1:
                        appId = _a.sent();
                        res.send(appId);
                        return [3 /*break*/, 3];
                    case 2:
                        error_4 = _a.sent();
                        Server.HandleError(res, error_4);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        }); });
        /** Archives an existing application */
        this.server.del("/app/:appId", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var key, appId, memory, app, error_5;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.InitClient(); // TEMP
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 7, , 8]);
                        key = req.params.key;
                        appId = req.params.appId;
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.ArchiveApp(appId)];
                    case 2:
                        _a.sent();
                        memory = BlisMemory_1.BlisMemory.GetMemory(key);
                        return [4 /*yield*/, memory.BotState.App()];
                    case 3:
                        app = _a.sent();
                        if (!(app && app.appId === appId)) return [3 /*break*/, 6];
                        return [4 /*yield*/, memory.BotState.SetApp(null)];
                    case 4:
                        _a.sent();
                        return [4 /*yield*/, memory.BotState.SetSession(null, false)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6:
                        res.send(200);
                        return [3 /*break*/, 8];
                    case 7:
                        error_5 = _a.sent();
                        Server.HandleError(res, error_5);
                        return [3 /*break*/, 8];
                    case 8: return [2 /*return*/];
                }
            });
        }); });
        /** Destroys an existing application, including all its models, sessions, and logged dialogs
         * Deleting an application from the archive really destroys it – no undo. */
        this.server.del("/archive/:appId", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var appId, error_6;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.InitClient(); // TEMP
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        appId = req.params.appId;
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.DeleteApp(appId)];
                    case 2:
                        _a.sent();
                        res.send(200);
                        return [3 /*break*/, 4];
                    case 3:
                        error_6 = _a.sent();
                        Server.HandleError(res, error_6);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); });
        /** GET APP STATUS : Retrieves details for a specific $appId */
        this.server.get("/archive/:appId", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var appId, blisApp, error_7;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.InitClient(); // TEMP
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        appId = req.params.appId;
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.GetAppStatus(appId)];
                    case 2:
                        blisApp = _a.sent();
                        res.send(blisApp);
                        return [3 /*break*/, 4];
                    case 3:
                        error_7 = _a.sent();
                        Server.HandleError(res, error_7);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); });
        /** Retrieves a list of (active) applications */
        this.server.get("/apps", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var query, apps, error_8;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.InitClient(); // TEMP
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        query = req.getQuery();
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.GetApps(query)];
                    case 2:
                        apps = _a.sent();
                        res.send(apps);
                        return [3 /*break*/, 4];
                    case 3:
                        error_8 = _a.sent();
                        Server.HandleError(res, error_8);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); });
        /** Retrieves a list of application Ids in the archive for the given user */
        this.server.get("/archive", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var query, apps, error_9;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.InitClient(); // TEMP
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        query = req.getQuery();
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.GetArchivedAppIds(query)];
                    case 2:
                        apps = _a.sent();
                        res.send(apps);
                        return [3 /*break*/, 4];
                    case 3:
                        error_9 = _a.sent();
                        Server.HandleError(res, error_9);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); });
        /** Retrieves a list of full applications in the archive for the given user */
        this.server.get("/archives", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var query, apps, error_10;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.InitClient(); // TEMP
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        query = req.getQuery();
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.GetArchivedApps(query)];
                    case 2:
                        apps = _a.sent();
                        res.send(apps);
                        return [3 /*break*/, 4];
                    case 3:
                        error_10 = _a.sent();
                        Server.HandleError(res, error_10);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); });
        /** Moves an application from the archive to the set of active applications */
        this.server.put("/archive/:appId", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var appId, app, error_11;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.InitClient(); // TEMP
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        appId = req.params.appId;
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.RestoreApp(appId)];
                    case 2:
                        app = _a.sent();
                        res.send(app);
                        return [3 /*break*/, 4];
                    case 3:
                        error_11 = _a.sent();
                        Server.HandleError(res, error_11);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); });
        //========================================================
        // Action
        //========================================================
        this.server.get("/app/:appId/action/:actionId", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var query, appId, actionId, action, error_12;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.InitClient(); // TEMP
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        query = req.getQuery();
                        appId = req.params.appId;
                        actionId = req.params.actionId;
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.GetAction(appId, actionId, query)];
                    case 2:
                        action = _a.sent();
                        res.send(action);
                        return [3 /*break*/, 4];
                    case 3:
                        error_12 = _a.sent();
                        Server.HandleError(res, error_12);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); });
        this.server.post("/app/:appId/action", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var appId, action, actionId, error_13;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        this.InitClient(); // TEMP
                        appId = req.params.appId;
                        action = new blis_models_1.ActionBase(req.body);
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.AddAction(appId, action)];
                    case 1:
                        actionId = _a.sent();
                        res.send(actionId);
                        return [3 /*break*/, 3];
                    case 2:
                        error_13 = _a.sent();
                        Server.HandleError(res, error_13);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        }); });
        this.server.put("/app/:appId/action/:actionId", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var appId, action, actionId, error_14;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        this.InitClient(); // TEMP
                        appId = req.params.appId;
                        action = new blis_models_1.ActionBase(req.body);
                        if (!action.actionId) {
                            action.actionId = req.params.actionId;
                        }
                        else if (req.params.actionId != action.actionId) {
                            return [2 /*return*/, next(new Restify.InvalidArgumentError("ActionId of object does not match URI"))];
                        }
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.EditAction(appId, action)];
                    case 1:
                        actionId = _a.sent();
                        res.send(actionId);
                        return [3 /*break*/, 3];
                    case 2:
                        error_14 = _a.sent();
                        Server.HandleError(res, error_14);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        }); });
        this.server.del("/app/:appId/action/:actionId", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var appId, actionId, error_15;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.InitClient(); // TEMP
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        appId = req.params.appId;
                        actionId = req.params.actionId;
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.DeleteAction(appId, actionId)];
                    case 2:
                        _a.sent();
                        res.send(200);
                        return [3 /*break*/, 4];
                    case 3:
                        error_15 = _a.sent();
                        Server.HandleError(res, error_15);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); });
        this.server.get("/app/:appId/actions", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var query, appId, actions, error_16;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.InitClient(); // TEMP
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        query = req.getQuery();
                        appId = req.params.appId;
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.GetActions(appId, query)];
                    case 2:
                        actions = _a.sent();
                        res.send(actions);
                        return [3 /*break*/, 4];
                    case 3:
                        error_16 = _a.sent();
                        Server.HandleError(res, error_16);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); });
        this.server.get("/app/:appId/action", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var query, appId, actions, error_17;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.InitClient(); // TEMP
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        query = req.getQuery();
                        appId = req.params.appId;
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.GetActionIds(appId, query)];
                    case 2:
                        actions = _a.sent();
                        res.send(actions);
                        return [3 /*break*/, 4];
                    case 3:
                        error_17 = _a.sent();
                        Server.HandleError(res, error_17);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); });
        //========================================================
        // Entities
        //========================================================
        this.server.get("/app/:appId/entityIds", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var query, appId, actions, error_18;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.InitClient(); // TEMP
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        query = req.getQuery();
                        appId = req.params.appId;
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.GetEntityIds(appId, query)];
                    case 2:
                        actions = _a.sent();
                        res.send(actions);
                        return [3 /*break*/, 4];
                    case 3:
                        error_18 = _a.sent();
                        Server.HandleError(res, error_18);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); });
        this.server.get("/app/:appId/entity/:entityId", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var query, appId, entityId, entity, error_19;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.InitClient(); // TEMP
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        query = req.getQuery();
                        appId = req.params.appId;
                        entityId = req.params.entityId;
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.GetEntity(appId, entityId, query)];
                    case 2:
                        entity = _a.sent();
                        res.send(entity);
                        return [3 /*break*/, 4];
                    case 3:
                        error_19 = _a.sent();
                        Server.HandleError(res, error_19);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); });
        this.server.post("/app/:appId/entity", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var appId, entity, entityId, error_20;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        this.InitClient(); // TEMP
                        appId = req.params.appId;
                        entity = new blis_models_1.EntityBase(req.body);
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.AddEntity(appId, entity)];
                    case 1:
                        entityId = _a.sent();
                        res.send(entityId);
                        return [3 /*break*/, 3];
                    case 2:
                        error_20 = _a.sent();
                        Server.HandleError(res, error_20);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        }); });
        this.server.put("/app/:appId/entity/:entityId", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var appId, entity, entityId, error_21;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        this.InitClient(); // TEMP
                        appId = req.params.appId;
                        entity = new blis_models_1.EntityBase(req.body);
                        if (!entity.entityId) {
                            entity.entityId = req.params.entityId;
                        }
                        else if (req.params.entityId != entity.entityId) {
                            return [2 /*return*/, next(new Restify.InvalidArgumentError("EntityId of object does not match URI"))];
                        }
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.EditEntity(appId, entity)];
                    case 1:
                        entityId = _a.sent();
                        res.send(entityId);
                        return [3 /*break*/, 3];
                    case 2:
                        error_21 = _a.sent();
                        Server.HandleError(res, error_21);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        }); });
        this.server.del("/app/:appId/entity/:entityId", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var appId, entityId, error_22;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.InitClient(); // TEMP
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        appId = req.params.appId;
                        entityId = req.params.entityId;
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.DeleteEntity(appId, entityId)];
                    case 2:
                        _a.sent();
                        res.send(200);
                        return [3 /*break*/, 4];
                    case 3:
                        error_22 = _a.sent();
                        Server.HandleError(res, error_22);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); });
        this.server.get("/app/:appId/entities", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var query, appId, entities, error_23;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.InitClient(); // TEMP
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        query = req.getQuery();
                        appId = req.params.appId;
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.GetEntities(appId, query)];
                    case 2:
                        entities = _a.sent();
                        res.send(entities);
                        return [3 /*break*/, 4];
                    case 3:
                        error_23 = _a.sent();
                        Server.HandleError(res, error_23);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); });
        this.server.get("/app/:appId/entity", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var query, appId, entityIds, error_24;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.InitClient(); // TEMP
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        query = req.getQuery();
                        appId = req.params.appId;
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.GetEntityIds(appId, query)];
                    case 2:
                        entityIds = _a.sent();
                        res.send(entityIds);
                        return [3 /*break*/, 4];
                    case 3:
                        error_24 = _a.sent();
                        Server.HandleError(res, error_24);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); });
        //========================================================
        // LogDialogs
        //========================================================
        this.server.get("/app/:appId/logdialog/:logDialogId", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var appId, logDialogId, logDialog, error_25;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.InitClient(); // TEMP
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        appId = req.params.appId;
                        logDialogId = req.params.logDialogId;
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.GetLogDialog(appId, logDialogId)];
                    case 2:
                        logDialog = _a.sent();
                        res.send(logDialog);
                        return [3 /*break*/, 4];
                    case 3:
                        error_25 = _a.sent();
                        Server.HandleError(res, error_25);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); });
        this.server.del("/app/:appId/logdialog/:logDialogId", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var appId, logDialogId, error_26;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.InitClient(); // TEMP
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        appId = req.params.appId;
                        logDialogId = req.params.logDialogId;
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.DeleteLogDialog(appId, logDialogId)];
                    case 2:
                        _a.sent();
                        res.send(200);
                        return [3 /*break*/, 4];
                    case 3:
                        error_26 = _a.sent();
                        Server.HandleError(res, error_26);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); });
        this.server.get("/app/:appId/logdialogs", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var query, appId, logDialogs, error_27;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.InitClient(); // TEMP
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        query = req.getQuery();
                        appId = req.params.appId;
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.GetLogDialogs(appId, query)];
                    case 2:
                        logDialogs = _a.sent();
                        res.send(logDialogs);
                        return [3 /*break*/, 4];
                    case 3:
                        error_27 = _a.sent();
                        Server.HandleError(res, error_27);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); });
        this.server.get("/app/:appId/logDialogIds", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var query, appId, logDialogIds, error_28;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.InitClient(); // TEMP
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        query = req.getQuery();
                        appId = req.params.appId;
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.GetLogDialogIds(appId, query)];
                    case 2:
                        logDialogIds = _a.sent();
                        res.send(logDialogIds);
                        return [3 /*break*/, 4];
                    case 3:
                        error_28 = _a.sent();
                        Server.HandleError(res, error_28);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); });
        /** RUN EXTRACTOR: Runs entity extraction on a log dialog
         */
        this.server.put("/app/:appId/logdialog/:logDialogId/extractor/:turnIndex", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var key, appId, logDialogId, turnIndex, userInput, extractResponse, memory, memories, uiExtractResponse, error_29;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        this.InitClient(); // TEMP
                        key = req.params.key;
                        appId = req.params.appId;
                        logDialogId = req.params.logDialogId;
                        turnIndex = req.params.turnIndex;
                        userInput = req.body;
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.LogDialogExtract(appId, logDialogId, turnIndex, userInput)];
                    case 1:
                        extractResponse = _a.sent();
                        memory = BlisMemory_1.BlisMemory.GetMemory(key);
                        return [4 /*yield*/, memory.BotMemory.DumpMemory()];
                    case 2:
                        memories = _a.sent();
                        uiExtractResponse = new blis_models_2.UIExtractResponse({ extractResponse: extractResponse, memories: memories });
                        res.send(uiExtractResponse);
                        return [3 /*break*/, 4];
                    case 3:
                        error_29 = _a.sent();
                        Server.HandleError(res, error_29);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); });
        //========================================================
        // TrainDialogs
        //========================================================
        this.server.post("/app/:appId/traindialog", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var appId, trainDialog, trainDialogId, error_30;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        this.InitClient(); // TEMP
                        appId = req.params.appId;
                        trainDialog = new blis_models_1.TrainDialog(req.body);
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.AddTrainDialog(appId, trainDialog)];
                    case 1:
                        trainDialogId = _a.sent();
                        res.send(trainDialogId);
                        return [3 /*break*/, 3];
                    case 2:
                        error_30 = _a.sent();
                        Server.HandleError(res, error_30);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        }); });
        this.server.put("/app/:appId/traindialog/:trainDialogId", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var appId, trainDialog, trainDialogId, error_31;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        this.InitClient(); // TEMP
                        appId = req.params.appId;
                        trainDialog = new blis_models_1.TrainDialog(req.body);
                        if (!trainDialog.trainDialogId) {
                            trainDialog.trainDialogId = req.params.trainDialogId;
                        }
                        else if (req.params.trainDialogId != trainDialog.trainDialogId) {
                            return [2 /*return*/, next(new Restify.InvalidArgumentError("ActionId of object does not match URI"))];
                        }
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.EditTrainDialog(appId, trainDialog)];
                    case 1:
                        trainDialogId = _a.sent();
                        res.send(trainDialogId);
                        return [3 /*break*/, 3];
                    case 2:
                        error_31 = _a.sent();
                        Server.HandleError(res, error_31);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        }); });
        this.server.get("/app/:appId/traindialog/:trainDialogId", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var appId, trainDialogId, trainDialog, error_32;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.InitClient(); // TEMP
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        appId = req.params.appId;
                        trainDialogId = req.params.trainDialogId;
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.GetTrainDialog(appId, trainDialogId)];
                    case 2:
                        trainDialog = _a.sent();
                        res.send(trainDialog);
                        return [3 /*break*/, 4];
                    case 3:
                        error_32 = _a.sent();
                        Server.HandleError(res, error_32);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); });
        this.server.del("/app/:appId/traindialog/:trainDialogId", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var appId, trainDialogId, error_33;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.InitClient(); // TEMP
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        appId = req.params.appId;
                        trainDialogId = req.params.trainDialogId;
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.DeleteTrainDialog(appId, trainDialogId)];
                    case 2:
                        _a.sent();
                        res.send(200);
                        return [3 /*break*/, 4];
                    case 3:
                        error_33 = _a.sent();
                        Server.HandleError(res, error_33);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); });
        this.server.get("/app/:appId/traindialogs", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var query, appId, trainDialogs, error_34;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.InitClient(); // TEMP
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        query = req.getQuery();
                        appId = req.params.appId;
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.GetTrainDialogs(appId, query)];
                    case 2:
                        trainDialogs = _a.sent();
                        res.send(trainDialogs);
                        return [3 /*break*/, 4];
                    case 3:
                        error_34 = _a.sent();
                        Server.HandleError(res, error_34);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); });
        this.server.get("/app/:appId/trainDialogIds", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var query, appId, trainDialogIds, error_35;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.InitClient(); // TEMP
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        query = req.getQuery();
                        appId = req.params.appId;
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.GetTrainDialogIds(appId, query)];
                    case 2:
                        trainDialogIds = _a.sent();
                        res.send(trainDialogIds);
                        return [3 /*break*/, 4];
                    case 3:
                        error_35 = _a.sent();
                        Server.HandleError(res, error_35);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); });
        /** RUN EXTRACTOR: Runs entity extraction on a train dialog
         */
        this.server.put("/app/:appId/traindialog/:trainDialogId/extractor/:turnIndex", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var key, appId, trainDialogId, turnIndex, userInput, extractResponse, memory, memories, uiExtractResponse, error_36;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        this.InitClient(); // TEMP
                        key = req.params.key;
                        appId = req.params.appId;
                        trainDialogId = req.params.trainDialogId;
                        turnIndex = req.params.turnIndex;
                        userInput = req.body;
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.TrainDialogExtract(appId, trainDialogId, turnIndex, userInput)];
                    case 1:
                        extractResponse = _a.sent();
                        memory = BlisMemory_1.BlisMemory.GetMemory(key);
                        return [4 /*yield*/, memory.BotMemory.DumpMemory()];
                    case 2:
                        memories = _a.sent();
                        uiExtractResponse = new blis_models_2.UIExtractResponse({ extractResponse: extractResponse, memories: memories });
                        res.send(uiExtractResponse);
                        return [3 /*break*/, 4];
                    case 3:
                        error_36 = _a.sent();
                        Server.HandleError(res, error_36);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); });
        //========================================================
        // Session
        //========================================================
        /** START SESSION : Creates a new session and a corresponding logDialog */
        this.server.post("/app/:appId/session", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var key, appId, sessionResponse, memory, error_37;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        this.InitClient(); // TEMP
                        key = req.params.key;
                        appId = req.params.appId;
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.StartSession(appId)];
                    case 1:
                        sessionResponse = _a.sent();
                        res.send(sessionResponse);
                        memory = BlisMemory_1.BlisMemory.GetMemory(key);
                        memory.StartSession(sessionResponse.sessionId, false);
                        return [3 /*break*/, 3];
                    case 2:
                        error_37 = _a.sent();
                        Server.HandleError(res, error_37);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        }); });
        /** GET SESSION : Retrieves information about the specified session */
        this.server.get("/app/:appId/session/:sessionId", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var appId, sessionId, response, error_38;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        this.InitClient(); // TEMP
                        appId = req.params.appId;
                        sessionId = req.params.sessionId;
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.GetSession(appId, sessionId)];
                    case 1:
                        response = _a.sent();
                        res.send(response);
                        return [3 /*break*/, 3];
                    case 2:
                        error_38 = _a.sent();
                        Server.HandleError(res, error_38);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        }); });
        /** END SESSION : End a session. */
        this.server.del("/app/:appId/session/:sessionId", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var query, key, appId, sessionId, response, memory, error_39;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.InitClient(); // TEMP
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        query = req.getQuery();
                        key = req.params.key;
                        appId = req.params.appId;
                        sessionId = req.params.sessionId;
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.EndSession(appId, sessionId, query)];
                    case 2:
                        response = _a.sent();
                        res.send(response);
                        memory = BlisMemory_1.BlisMemory.GetMemory(key);
                        memory.EndSession();
                        return [3 /*break*/, 4];
                    case 3:
                        error_39 = _a.sent();
                        Server.HandleError(res, error_39);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); });
        /** GET SESSIONS : Retrieves definitions of ALL open sessions */
        this.server.get("/app/:appId/sessions", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var query, appId, sessions, error_40;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.InitClient(); // TEMP
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        query = req.getQuery();
                        appId = req.params.appId;
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.GetSessions(appId, query)];
                    case 2:
                        sessions = _a.sent();
                        res.send(sessions);
                        return [3 /*break*/, 4];
                    case 3:
                        error_40 = _a.sent();
                        Server.HandleError(res, error_40);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); });
        /** GET SESSION IDS : Retrieves a list of session IDs */
        this.server.get("/app/:appId/session", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var query, appId, sessionIds, error_41;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.InitClient(); // TEMP
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        query = req.getQuery();
                        appId = req.params.appId;
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.GetSessionIds(appId, query)];
                    case 2:
                        sessionIds = _a.sent();
                        res.send(sessionIds);
                        return [3 /*break*/, 4];
                    case 3:
                        error_41 = _a.sent();
                        Server.HandleError(res, error_41);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); });
        //========================================================
        // Teach
        //========================================================
        /** START TEACH SESSION: Creates a new teaching session and a corresponding trainDialog */
        this.server.post("/app/:appId/teach", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var key, appId, teachResponse, memory, error_42;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        this.InitClient(); // TEMP
                        key = req.params.key;
                        appId = req.params.appId;
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.StartTeach(appId)];
                    case 1:
                        teachResponse = _a.sent();
                        res.send(teachResponse);
                        memory = BlisMemory_1.BlisMemory.GetMemory(key);
                        memory.StartSession(teachResponse.teachId, true);
                        return [3 /*break*/, 3];
                    case 2:
                        error_42 = _a.sent();
                        Server.HandleError(res, error_42);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        }); });
        /** GET TEACH: Retrieves information about the specified teach */
        this.server.get("/app/:appId/teach/:teachId", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var appId, teachId, response, error_43;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        this.InitClient(); // TEMP
                        appId = req.params.appId;
                        teachId = req.params.teachId;
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.GetTeach(appId, teachId)];
                    case 1:
                        response = _a.sent();
                        res.send(response);
                        return [3 /*break*/, 3];
                    case 2:
                        error_43 = _a.sent();
                        Server.HandleError(res, error_43);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        }); });
        /** RUN EXTRACTOR: Runs entity extraction (prediction).
         * If a more recent version of the package is available on
         * the server, the session will first migrate to that newer version.  This
         * doesn't affect the trainDialog maintained.
         */
        this.server.put("/app/:appId/teach/:teachId/extractor", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var key, appId, teachId, userInput, extractResponse, memory, memories, uiExtractResponse, error_44;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        this.InitClient(); // TEMP
                        key = req.params.key;
                        appId = req.params.appId;
                        teachId = req.params.teachId;
                        userInput = req.body;
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.TeachExtract(appId, teachId, userInput)];
                    case 1:
                        extractResponse = _a.sent();
                        memory = BlisMemory_1.BlisMemory.GetMemory(key);
                        return [4 /*yield*/, memory.BotMemory.DumpMemory()];
                    case 2:
                        memories = _a.sent();
                        uiExtractResponse = new blis_models_2.UIExtractResponse({ extractResponse: extractResponse, memories: memories });
                        res.send(uiExtractResponse);
                        return [3 /*break*/, 4];
                    case 3:
                        error_44 = _a.sent();
                        Server.HandleError(res, error_44);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); });
        /** EXTRACT FEEDBACK & RUN SCORER:
         * 1) Uploads a labeled entity extraction instance
         * ie "commits" an entity extraction label, appending it to the teach session's
         * trainDialog, and advancing the dialog. This may yield produce a new package.
         * 2) Takes a turn and return distribution over actions.
         * If a more recent version of the package is
         * available on the server, the session will first migrate to that newer version.
         * This doesn't affect the trainDialog maintained by the teaching session.
         */
        this.server.put("/app/:appId/teach/:teachId/scorer", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var key, appId, teachId, uiScoreInput, memory, extractResponse, scoreInput, scoreResponse, memories, uiScoreResponse, error_45;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 6, , 7]);
                        this.InitClient(); // TEMP
                        key = req.params.key;
                        appId = req.params.appId;
                        teachId = req.params.teachId;
                        uiScoreInput = new blis_models_2.UIScoreInput(req.body);
                        memory = BlisMemory_1.BlisMemory.GetMemory(key);
                        if (!uiScoreInput.trainExtractorStep) return [3 /*break*/, 2];
                        // Send teach feedback
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.TeachExtractFeedback(appId, teachId, uiScoreInput.trainExtractorStep)];
                    case 1:
                        // Send teach feedback
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        extractResponse = uiScoreInput.extractResponse;
                        return [4 /*yield*/, BlisDialog_1.BlisDialog.Instance.CallLuisCallback(extractResponse.text, extractResponse.predictedEntities, memory, extractResponse.definitions.entities)];
                    case 3:
                        scoreInput = _a.sent();
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.TeachScore(appId, teachId, scoreInput)];
                    case 4:
                        scoreResponse = _a.sent();
                        return [4 /*yield*/, memory.BotMemory.DumpMemory()];
                    case 5:
                        memories = _a.sent();
                        uiScoreResponse = new blis_models_2.UIScoreResponse({ scoreInput: scoreInput, scoreResponse: scoreResponse, memories: memories });
                        res.send(uiScoreResponse);
                        return [3 /*break*/, 7];
                    case 6:
                        error_45 = _a.sent();
                        Server.HandleError(res, error_45);
                        return [3 /*break*/, 7];
                    case 7: return [2 /*return*/];
                }
            });
        }); });
        /** SCORE FEEDBACK: Uploads a labeled scorer step instance
         * – ie "commits" a scorer label, appending it to the teach session's
         * trainDialog, and advancing the dialog. This may yield produce a new package.
         */
        this.server.post("/app/:appId/teach/:teachId/scorer", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var key, appId, teachId, uiTrainScorerStep, scoredAction, teachResponse, memory, memories, uiTeachResponse, error_46;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 4, , 5]);
                        this.InitClient(); // TEMP
                        key = req.params.key;
                        appId = req.params.appId;
                        teachId = req.params.teachId;
                        uiTrainScorerStep = new blis_models_2.UITrainScorerStep(req.body);
                        scoredAction = uiTrainScorerStep.trainScorerStep.scoredAction;
                        delete uiTrainScorerStep.trainScorerStep.scoredAction;
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.TeachScoreFeedback(appId, teachId, uiTrainScorerStep.trainScorerStep)];
                    case 1:
                        teachResponse = _a.sent();
                        memory = BlisMemory_1.BlisMemory.GetMemory(key);
                        // Now take the trained action
                        return [4 /*yield*/, BlisDialog_1.BlisDialog.Instance.TakeAction(scoredAction, memory, uiTrainScorerStep.entities)];
                    case 2:
                        // Now take the trained action
                        _a.sent();
                        return [4 /*yield*/, memory.BotMemory.DumpMemory()];
                    case 3:
                        memories = _a.sent();
                        uiTeachResponse = new blis_models_2.UITeachResponse({ teachResponse: teachResponse, memories: memories });
                        res.send(uiTeachResponse);
                        return [3 /*break*/, 5];
                    case 4:
                        error_46 = _a.sent();
                        Server.HandleError(res, error_46);
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        }); });
        /** END TEACH: Ends a teach.
         * For Teach sessions, does NOT delete the associated trainDialog.
         * To delete the associated trainDialog, call DELETE on the trainDialog.
         */
        this.server.del("/app/:appId/teach/:teachId", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var key, appId, teachId, save, response, memory, error_47;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.InitClient(); // TEMP
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        key = req.params.key;
                        appId = req.params.appId;
                        teachId = req.params.teachId;
                        save = req.params.save ? "saveDialog=" + req.params.save : null;
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.EndTeach(appId, teachId, save)];
                    case 2:
                        response = _a.sent();
                        res.send(response);
                        memory = BlisMemory_1.BlisMemory.GetMemory(key);
                        memory.EndSession();
                        return [3 /*break*/, 4];
                    case 3:
                        error_47 = _a.sent();
                        Server.HandleError(res, error_47);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); });
        /** GET TEACH SESSOINS: Retrieves definitions of ALL open teach sessions */
        this.server.get("/app/:appId/teaches", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var query, appId, teaches, error_48;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.InitClient(); // TEMP
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        query = req.getQuery();
                        appId = req.params.appId;
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.GetTeaches(appId, query)];
                    case 2:
                        teaches = _a.sent();
                        res.send(teaches);
                        return [3 /*break*/, 4];
                    case 3:
                        error_48 = _a.sent();
                        Server.HandleError(res, error_48);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); });
        /** GET TEACH SESSION IDS: Retrieves a list of teach session IDs */
        this.server.get("/app/:appId/teach", function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var query, appId, teachIds, error_49;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.InitClient(); // TEMP
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        query = req.getQuery();
                        appId = req.params.appId;
                        return [4 /*yield*/, BlisClient_1.BlisClient.client.GetTeachIds(appId, query)];
                    case 2:
                        teachIds = _a.sent();
                        res.send(teachIds);
                        return [3 /*break*/, 4];
                    case 3:
                        error_49 = _a.sent();
                        Server.HandleError(res, error_49);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); });
    };
    Server.server = null;
    return Server;
}());
exports.Server = Server;
//# sourceMappingURL=Server.js.map