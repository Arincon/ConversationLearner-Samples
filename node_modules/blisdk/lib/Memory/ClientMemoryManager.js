"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var BlisDebug_1 = require("../BlisDebug");
var ClientMemoryManager = (function () {
    function ClientMemoryManager(memory, entities) {
        this.blisMemory = null;
        this.entities = null;
        this.entities = entities;
        this.blisMemory = memory;
    }
    ClientMemoryManager.prototype.FindEntity = function (entityName) {
        var match = this.entities.find(function (e) { return e.entityName == entityName; });
        return match;
    };
    ClientMemoryManager.prototype.RememberEntityAsync = function (entityName, value) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var entity, isBucket;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        entity = this.FindEntity(entityName);
                        if (!entity) {
                            BlisDebug_1.BlisDebug.Error("Can't find Entity named: " + entityName);
                            return [2 /*return*/, null];
                        }
                        isBucket = entity.metadata ? entity.metadata.isBucket : false;
                        return [4 /*yield*/, this.blisMemory.BotMemory.Remember(entity.entityName, entity.entityId, value, isBucket)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ClientMemoryManager.prototype.ForgetEntityAsync = function (entityName, value) {
        if (value === void 0) { value = null; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var entity, isBucket;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        entity = this.FindEntity(entityName);
                        if (!entity) {
                            BlisDebug_1.BlisDebug.Error("Can't find Entity named: " + entityName);
                            return [2 /*return*/, null];
                        }
                        isBucket = (entity.metadata && value) ? entity.metadata.isBucket : false;
                        return [4 /*yield*/, this.blisMemory.BotMemory.Forget(entity.entityName, value, isBucket)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ClientMemoryManager.prototype.CopyEntityAsync = function (entityNameFrom, entityNameTo) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var entityFrom, entityTo, isBucketFrom, isBucketTo, values, _i, values_1, value;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        entityFrom = this.FindEntity(entityNameFrom);
                        entityTo = this.FindEntity(entityNameTo);
                        if (!entityFrom) {
                            BlisDebug_1.BlisDebug.Error("Can't find Entity named: " + entityNameFrom);
                            return [2 /*return*/, null];
                        }
                        if (!entityTo) {
                            BlisDebug_1.BlisDebug.Error("Can't find Entity named: " + entityNameTo);
                            return [2 /*return*/, null];
                        }
                        isBucketFrom = (entityFrom.metadata) ? entityFrom.metadata.isBucket : false;
                        isBucketTo = (entityTo.metadata) ? entityTo.metadata.isBucket : false;
                        if (isBucketFrom != isBucketTo) {
                            BlisDebug_1.BlisDebug.Error("Can't copy between Bucket and Non-Bucket Entities");
                            return [2 /*return*/, null];
                        }
                        // Clear "To" entity
                        return [4 /*yield*/, this.blisMemory.BotMemory.Forget(entityNameTo)];
                    case 1:
                        // Clear "To" entity
                        _a.sent();
                        return [4 /*yield*/, this.blisMemory.BotMemory.ValueAsList(entityNameFrom)];
                    case 2:
                        values = _a.sent();
                        _i = 0, values_1 = values;
                        _a.label = 3;
                    case 3:
                        if (!(_i < values_1.length)) return [3 /*break*/, 6];
                        value = values_1[_i];
                        return [4 /*yield*/, this.RememberEntityAsync(entityNameTo, value)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        _i++;
                        return [3 /*break*/, 3];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    ClientMemoryManager.prototype.EntityValueAsync = function (entityName) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.blisMemory.BotMemory.Value(entityName)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ClientMemoryManager.prototype.EntityValueAsPrebuiltAsync = function (entityName) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.blisMemory.BotMemory.ValueAsPrebuilt(entityName)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ClientMemoryManager.prototype.EntityValueAsListAsync = function (entityName) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.blisMemory.BotMemory.ValueAsList(entityName)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ClientMemoryManager.prototype.GetFilledEntitiesAsync = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.blisMemory.BotMemory.RememberedIds()];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ClientMemoryManager.prototype.AppNameAsync = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var app;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.blisMemory.BotState.App()];
                    case 1:
                        app = _a.sent();
                        return [2 /*return*/, app.appName];
                }
            });
        });
    };
    return ClientMemoryManager;
}());
exports.ClientMemoryManager = ClientMemoryManager;
//# sourceMappingURL=ClientMemoryManager.js.map