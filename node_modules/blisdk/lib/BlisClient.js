"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var blis_models_1 = require("blis-models");
var Credentials_1 = require("./Http/Credentials");
var BlisDebug_1 = require("./BlisDebug");
var NodeCache = require("node-cache");
var Request = require("request");
var BlisClient = (function () {
    function BlisClient(serviceUri, user, secret, azureFunctionsUrl, azureFunctionsKey) {
        this.user = user;
        this.actionCache = new NodeCache({ stdTTL: 300, checkperiod: 600 });
        this.entityCache = new NodeCache({ stdTTL: 300, checkperiod: 600 });
        this.exportCache = new NodeCache({ stdTTL: 300, checkperiod: 600 });
        if (!serviceUri) {
            throw "ServiceUri is not set";
        }
        BlisDebug_1.BlisDebug.Log("Creating BlisClient...");
        this.serviceUri = serviceUri;
        this.credentials = new Credentials_1.Credentials(user, secret);
        this.azureFunctionsUrl = azureFunctionsUrl;
        this.azureFunctionsKey = azureFunctionsKey;
    }
    // Create singleton
    BlisClient.Init = function (user, secret, azureFunctionsUrl, azureFunctionsKey) {
        this.client = new BlisClient(this.serviceURI, user, secret, azureFunctionsUrl, azureFunctionsKey);
    };
    BlisClient.SetServiceURI = function (serviceURI) {
        this.serviceURI = serviceURI;
    };
    BlisClient.prototype.MakeURL = function (apiPath, query) {
        var uri = this.serviceUri + (!this.serviceUri.endsWith("/") ? "/" : "") + apiPath;
        if (query)
            uri += "?" + query;
        return uri;
    };
    BlisClient.prototype.ClearExportCache = function (appId) {
        this.exportCache.del(appId);
    };
    //=============================================================================
    // Action
    //=============================================================================
    /** Retrieves information about a specific action for the current package
     *  (or the specified package if provided) */
    BlisClient.prototype.GetAction = function (appId, actionId, query) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            // Check cache first
            var action = _this.actionCache.get(actionId);
            if (action) {
                resolve(action);
                return;
            }
            // Call API
            var apiPath = "app/" + appId + "/action/" + actionId;
            var requestData = {
                url: _this.MakeURL(apiPath, query),
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("GET", apiPath, requestData);
            Request.get(requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    var action = new blis_models_1.ActionBase(body);
                    action.actionId = actionId;
                    _this.actionCache.set(actionId, action);
                    resolve(action);
                }
            });
        });
    };
    /** Retrieves definitions of ALL actions for the current package
     * (or the specified package if provided). To retrieve just the
     * IDs of actions, see the GetActionIds Method */
    BlisClient.prototype.GetActions = function (appId, query) {
        var _this = this;
        var apiPath = "app/" + appId + "/actions";
        return new Promise(function (resolve, reject) {
            var requestData = {
                url: _this.MakeURL(apiPath, query),
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("GET", apiPath, requestData);
            Request.get(requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    var actions = new blis_models_1.ActionList(body);
                    resolve(actions);
                }
            });
        });
    };
    /** Retrieves a list of action IDs for the latest package
     * (or the specified package, if provided).  To retrieve
     * the definitions of many actions, see the GetAction method */
    BlisClient.prototype.GetActionIds = function (appId, query) {
        var _this = this;
        var apiPath = "app/" + appId + "/action";
        return new Promise(function (resolve, reject) {
            var requestData = {
                url: _this.MakeURL(apiPath, query),
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("GET", apiPath, requestData);
            Request.get(requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    var actions = new blis_models_1.ActionIdList(body);
                    resolve(actions);
                }
            });
        });
    };
    /** Updates payload and/or metadata on an existing action */
    BlisClient.prototype.EditAction = function (appId, action) {
        var _this = this;
        var apiPath = "app/" + appId + "/action/" + action.actionId;
        // Clear old one from cache
        this.actionCache.del(action.actionId);
        return new Promise(function (resolve, reject) {
            var requestData = {
                url: _this.MakeURL(apiPath),
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                body: action,
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("PUT", apiPath, requestData);
            Request.put(requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    // Service returns a 204
                    resolve(body);
                }
            });
        });
    };
    /** Marks an action as deleted */
    BlisClient.prototype.DeleteAction = function (appId, actionId) {
        var _this = this;
        var apiPath = "app/" + appId + "/action/" + actionId;
        return new Promise(function (resolve, reject) {
            var url = _this.MakeURL(apiPath);
            var requestData = {
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("DELETE", apiPath, requestData);
            Request.delete(url, requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    resolve(body);
                }
            });
        });
    };
    /** Create a new action */
    BlisClient.prototype.AddAction = function (appId, action) {
        var _this = this;
        var apiPath = "app/" + appId + "/action";
        return new Promise(function (resolve, reject) {
            var requestData = {
                url: _this.MakeURL(apiPath),
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                body: action,
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("POST", apiPath, requestData);
            Request.post(requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    resolve(body.actionId);
                }
            });
        });
    };
    //==============================================================================
    // App
    //=============================================================================
    /** Retrieve information about a specific application
     * If the app ID isn't found in the set of (non-archived) apps,
     * returns 404 error ("not found")
     */
    BlisClient.prototype.GetApp = function (appId, query) {
        var _this = this;
        var apiPath = "app/" + appId + "?userId=" + this.user;
        return new Promise(function (resolve, reject) {
            var url = _this.MakeURL(apiPath, query);
            var requestData = {
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("GET", apiPath, requestData);
            Request.get(url, requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    var blisApp = new blis_models_1.BlisAppBase(body);
                    blisApp.appId = appId;
                    resolve(blisApp);
                }
            });
        });
    };
    /** Retrieve a list of (active) applications */
    BlisClient.prototype.GetApps = function (query) {
        var _this = this;
        var apiPath = "apps";
        return new Promise(function (resolve, reject) {
            var requestData = {
                url: _this.MakeURL(apiPath, query),
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("GET", apiPath, requestData);
            Request.get(requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    var apps = new blis_models_1.BlisAppList(body);
                    resolve(apps);
                }
            });
        });
    };
    /** Rename an existing application or changes its LUIS key
     * Note: Renaming an application does not affect packages
     */
    BlisClient.prototype.EditApp = function (app, query) {
        var _this = this;
        var apiPath = "app/" + app.appId;
        return new Promise(function (resolve, reject) {
            var requestData = {
                url: _this.MakeURL(apiPath, query),
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                body: app,
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("PUT", apiPath, requestData);
            Request.put(requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    // Service returns a 204
                    resolve(body);
                }
            });
        });
    };
    /** Archive an existing application
     * Note: "deleting" an application doesn't destroy it, but rather archives
     * it for a period (eg 30 days).  During the archive period, the application
     * can be restored with the next API call.  At the end of the archive period,
     * the application is destroyed.
     */
    BlisClient.prototype.ArchiveApp = function (appId) {
        var _this = this;
        var apiPath = "app/" + appId;
        return new Promise(function (resolve, reject) {
            var url = _this.MakeURL(apiPath);
            var requestData = {
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("DELETE", apiPath, requestData);
            Request.delete(url, requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    resolve(body);
                }
            });
        });
    };
    /** Create a new application
     */
    BlisClient.prototype.AddApp = function (blisApp, query) {
        var _this = this;
        var apiPath = "app";
        return new Promise(function (resolve, reject) {
            var requestData = {
                url: _this.MakeURL(apiPath, query),
                headers: {
                    'Cookie': _this.credentials.Cookiestring(),
                },
                body: blisApp,
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("POST", apiPath, requestData);
            Request.post(requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    var appId = body.appId;
                    resolve(appId);
                }
            });
        });
    };
    /** Destroys an existing application, including all its models, sessions, and logged dialogs
     * Deleting an application from the archive really destroys it – no undo.
     */
    BlisClient.prototype.DeleteApp = function (appId) {
        var _this = this;
        var apiPath = "archive/" + appId;
        return new Promise(function (resolve, reject) {
            var url = _this.MakeURL(apiPath);
            var requestData = {
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("DELETE", apiPath, requestData);
            Request.delete(url, requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    resolve(body);
                }
            });
        });
    };
    /** Retrieves details for a specific $appId*/
    BlisClient.prototype.GetAppStatus = function (appId) {
        var _this = this;
        var apiPath = "archive/" + appId;
        return new Promise(function (resolve, reject) {
            var url = _this.MakeURL(apiPath);
            var requestData = {
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("DELETE", apiPath, requestData);
            Request.get(url, requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    var app = new blis_models_1.BlisAppBase(body);
                    resolve(app);
                }
            });
        });
    };
    /** Moves an application from the archive to the set of active applications */
    BlisClient.prototype.RestoreApp = function (appId) {
        var _this = this;
        var apiPath = "archive/" + appId;
        return new Promise(function (resolve, reject) {
            var requestData = {
                url: _this.MakeURL(apiPath),
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("PUT", apiPath, requestData);
            Request.put(requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    // Service returns a 204
                    resolve(body);
                }
            });
        });
    };
    /** Retrieves a list of application Ids in the archive for the given user */
    BlisClient.prototype.GetArchivedAppIds = function (query) {
        var _this = this;
        var apiPath = "archive";
        return new Promise(function (resolve, reject) {
            var requestData = {
                url: _this.MakeURL(apiPath, query),
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("GET", apiPath, requestData);
            Request.get(requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    var apps = new blis_models_1.BlisAppIdList(body);
                    resolve(apps);
                }
            });
        });
    };
    /** Retrieves a list of full applications in the archive for the given user */
    BlisClient.prototype.GetArchivedApps = function (query) {
        var _this = this;
        var apiPath = "archives";
        return new Promise(function (resolve, reject) {
            var requestData = {
                url: _this.MakeURL(apiPath, query),
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("GET", apiPath, requestData);
            Request.get(requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    var apps = new blis_models_1.BlisAppList(body);
                    resolve(apps);
                }
            });
        });
    };
    //==============================================================================
    // Entity
    //=============================================================================
    /** Retrieves information about a specific entity in the latest package
     * (or the specified package, if provided) */
    BlisClient.prototype.GetEntity = function (appId, entityId, query) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            // Check cache first
            var entity = _this.entityCache.get(entityId);
            if (entity) {
                resolve(entity);
                return;
            }
            var apiPath = "app/" + appId + "/entity/" + entityId;
            var requestData = {
                url: _this.MakeURL(apiPath, query),
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("GET", apiPath, requestData);
            Request.get(requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    var entity_1 = new blis_models_1.EntityBase(body);
                    entity_1.entityId = entityId;
                    if (!entity_1.metadata) {
                        entity_1.metadata = new blis_models_1.EntityMetaData();
                    }
                    _this.entityCache.set(entityId, entity_1);
                    resolve(entity_1);
                }
            });
        });
    };
    /** Retrieves definitions of ALL entities in the latest package
     * (or the specified package, if provided).  To retrieve just the IDs
     * of all entities, see the GetEntityIds method */
    BlisClient.prototype.GetEntities = function (appId, query) {
        var _this = this;
        var apiPath = "app/" + appId + "/entities";
        return new Promise(function (resolve, reject) {
            var requestData = {
                url: _this.MakeURL(apiPath, query),
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("GET", apiPath, requestData);
            Request.get(requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    var entities = new blis_models_1.EntityList(body);
                    resolve(entities);
                }
            });
        });
    };
    /** Retrieves a list of entity IDs for the latest package
     * (or the specified package, if provided).  To retrieve the definitions
     * of many entities, see the GetEntities method */
    BlisClient.prototype.GetEntityIds = function (appId, query) {
        var _this = this;
        var apiPath = "app/" + appId + "/entity";
        return new Promise(function (resolve, reject) {
            var requestData = {
                url: _this.MakeURL(apiPath, query),
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("GET", apiPath, requestData);
            Request.get(requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    var entityIds = new blis_models_1.EntityIdList(body);
                    resolve(entityIds);
                }
            });
        });
    };
    /** Updates name and/or metadata on an existing entity */
    BlisClient.prototype.EditEntity = function (appId, entity) {
        var _this = this;
        var apiPath = "app/" + appId + "/entity/" + entity.entityId;
        // Clear old one from cache
        this.entityCache.del(entity.entityId);
        return new Promise(function (resolve, reject) {
            var requestData = {
                url: _this.MakeURL(apiPath),
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                body: entity,
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("PUT", apiPath, requestData);
            Request.put(requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    resolve(body);
                }
            });
        });
    };
    /** Deletes an entity */
    BlisClient.prototype.DeleteEntity = function (appId, entityId) {
        var _this = this;
        var apiPath = "app/" + appId + "/entity/" + entityId;
        return new Promise(function (resolve, reject) {
            var url = _this.MakeURL(apiPath);
            var requestData = {
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("DELETE", apiPath, requestData);
            Request.delete(url, requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    resolve(body);
                }
            });
        });
    };
    /** Create a new entity */
    BlisClient.prototype.AddEntity = function (appId, entity) {
        var _this = this;
        var apiPath = "app/" + appId + "/entity";
        return new Promise(function (resolve, reject) {
            var requestData = {
                url: _this.MakeURL(apiPath),
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                body: entity,
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("POST", apiPath, requestData);
            Request.post(requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    resolve(body.entityId);
                }
            });
        });
    };
    //=============================================================================
    // Log Dialogs
    //=============================================================================
    /** Retrieves information about a specific logDialog */
    BlisClient.prototype.GetLogDialog = function (appId, logDialogId) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var apiPath = "app/" + appId + "/logdialog/" + logDialogId;
            var requestData = {
                url: _this.MakeURL(apiPath),
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("GET", apiPath, requestData);
            Request.get(requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    var logDialog = new blis_models_1.LogDialog(body);
                    logDialog.logDialogId = logDialogId;
                    resolve(logDialog);
                }
            });
        });
    };
    /** Retrieves the contents of many/all logDialogs.
     * To retrieve just a list of IDs of all logDialogs,
     * see the GET GetLogDialogIds method. */
    BlisClient.prototype.GetLogDialogs = function (appId, query) {
        var _this = this;
        var apiPath = "app/" + appId + "/logdialogs";
        return new Promise(function (resolve, reject) {
            var requestData = {
                url: _this.MakeURL(apiPath, query),
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("GET", apiPath, requestData);
            Request.get(requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    var logDialogList = new blis_models_1.LogDialogList(body);
                    resolve(logDialogList);
                }
            });
        });
    };
    /** Retrieves just the IDs of logDialogs.
     * To retrieve the contents of many logDialogs, see the GetLogDialogs method. */
    BlisClient.prototype.GetLogDialogIds = function (appId, query) {
        var _this = this;
        var apiPath = "app/" + appId + "/logdialog";
        return new Promise(function (resolve, reject) {
            var requestData = {
                url: _this.MakeURL(apiPath, query),
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("GET", apiPath, requestData);
            Request.get(requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    var logDialogsIds = new blis_models_1.LogDialogIdList(body);
                    resolve(logDialogsIds);
                }
            });
        });
    };
    /** Deletes a LogDialog */
    BlisClient.prototype.DeleteLogDialog = function (appId, logDialogId) {
        var _this = this;
        var apiPath = "app/" + appId + "/logdialog/" + logDialogId;
        return new Promise(function (resolve, reject) {
            var url = _this.MakeURL(apiPath);
            var requestData = {
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("DELETE", apiPath, requestData);
            Request.delete(url, requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    resolve(body);
                }
            });
        });
    };
    /** Runs entity extraction (prediction). */
    BlisClient.prototype.LogDialogExtract = function (appId, logDialogId, turnIndex, userInput) {
        // TEMP - until supported by server
        return new Promise(function (resolve, reject) {
            var extractResponse = new blis_models_1.ExtractResponse({
                text: userInput.text,
                predictedEntities: []
            });
            resolve(extractResponse);
        });
        /*
        let apiPath = `app/${appId}/logdialog/${logDialogId}/extractor/${turnIndex}`;

        // Always retrieve entity list
        let query = "includeDefinitions=true";
        return new Promise(
            (resolve, reject) => {
            const requestData = {
                    url: this.MakeURL(apiPath, query),
                    headers: {
                        'Cookie' : this.credentials.Cookiestring()
                    },
                    body: userInput,
                    json: true
                }

                BlisDebug.LogRequest("PUT",apiPath, requestData);
                Request.put(requestData, (error, response, body) => {
                    if (error) {
                        reject(error);
                    }
                    else if (response.statusCode >= 300) {
                        reject(response);
                    }
                    else {
                        var extractResponse = new ExtractResponse(body);
                        resolve(extractResponse);
                    }
                });
            }
        )*/
    };
    //=============================================================================
    // Train Dialogs
    //=============================================================================
    /** Create a new TrainDialog */
    BlisClient.prototype.AddTrainDialog = function (appId, trainDialog) {
        var _this = this;
        var apiPath = "app/" + appId + "/traindialog";
        return new Promise(function (resolve, reject) {
            var requestData = {
                url: _this.MakeURL(apiPath),
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                body: trainDialog,
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("POST", apiPath, requestData);
            Request.post(requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    var editResponse = new blis_models_1.TrainResponse(body);
                    resolve(editResponse);
                }
            });
        });
    };
    /** Updates a trainDialog, overwriting the content of its dialog */
    BlisClient.prototype.EditTrainDialog = function (appId, trainDialog) {
        var _this = this;
        var apiPath = "app/" + appId + "/traindialog/" + trainDialog.trainDialogId;
        // Clear old one from cache
        this.entityCache.del(trainDialog.trainDialogId);
        return new Promise(function (resolve, reject) {
            var requestData = {
                url: _this.MakeURL(apiPath),
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                body: trainDialog,
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("PUT", apiPath, requestData);
            Request.put(requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    var editResponse = new blis_models_1.TrainResponse(body);
                    resolve(editResponse);
                }
            });
        });
    };
    /** Retrieves information about a specific trainDialog in the current package
     * (or the specified package, if provided) */
    BlisClient.prototype.GetTrainDialog = function (appId, trainDialogId) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var apiPath = "app/" + appId + "/traindialog/" + trainDialogId;
            var requestData = {
                url: _this.MakeURL(apiPath),
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("GET", apiPath, requestData);
            Request.get(requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    var trainDialog = new blis_models_1.TrainDialog(body);
                    trainDialog.trainDialogId = trainDialogId;
                    resolve(trainDialog);
                }
            });
        });
    };
    /** Retrieves the contents of many/all train dialogs.
     * To retrieve just a list of IDs of all trainDialogs,
     * see the GetTrainDialogIds method */
    BlisClient.prototype.GetTrainDialogs = function (appId, query) {
        var _this = this;
        var apiPath = "app/" + appId + "/traindialogs";
        return new Promise(function (resolve, reject) {
            var requestData = {
                url: _this.MakeURL(apiPath, query),
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("GET", apiPath, requestData);
            Request.get(requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    var trainDialogList = new blis_models_1.TrainDialogList(body);
                    resolve(trainDialogList);
                }
            });
        });
    };
    /** Retrieves a list of trainDialog IDs.
     * To retrieve the contents of multiple trainDialogs,
     * see the GetTrainDialogs method */
    BlisClient.prototype.GetTrainDialogIds = function (appId, query) {
        var _this = this;
        var apiPath = "app/" + appId + "/traindialog";
        return new Promise(function (resolve, reject) {
            var requestData = {
                url: _this.MakeURL(apiPath, query),
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("GET", apiPath, requestData);
            Request.get(requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    var trainDialogsIds = new blis_models_1.TrainDialogIdList(body);
                    resolve(trainDialogsIds);
                }
            });
        });
    };
    /** Deletes a TrainDialog */
    BlisClient.prototype.DeleteTrainDialog = function (appId, trainDialogId) {
        var _this = this;
        var apiPath = "app/" + appId + "/traindialog/" + trainDialogId;
        return new Promise(function (resolve, reject) {
            var url = _this.MakeURL(apiPath);
            var requestData = {
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("DELETE", apiPath, requestData);
            Request.delete(url, requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    var deleteResponse = new blis_models_1.TrainResponse(body);
                    resolve(deleteResponse);
                }
            });
        });
    };
    /** Runs entity extraction (prediction). */
    BlisClient.prototype.TrainDialogExtract = function (appId, trainDialogId, turnIndex, userInput) {
        // TEMP - until supported by server
        return new Promise(function (resolve, reject) {
            var extractResponse = new blis_models_1.ExtractResponse({
                text: userInput.text,
                predictedEntities: []
            });
            resolve(extractResponse);
        });
        /*
        let apiPath = `app/${appId}/traindialog/${trainDialogId}/extractor/${turnIndex}`;

        // Always retrieve entity list
        let query = "includeDefinitions=true";
        return new Promise(
            (resolve, reject) => {
            const requestData = {
                    url: this.MakeURL(apiPath, query),
                    headers: {
                        'Cookie' : this.credentials.Cookiestring()
                    },
                    body: userInput,
                    json: true
                }

                BlisDebug.LogRequest("PUT",apiPath, requestData);
                Request.put(requestData, (error, response, body) => {
                    if (error) {
                        reject(error);
                    }
                    else if (response.statusCode >= 300) {
                        reject(response);
                    }
                    else {
                        var extractResponse = new ExtractResponse(body);
                        resolve(extractResponse);
                    }
                });
            }
        )*/
    };
    //=============================================================================
    // Session
    //=============================================================================
    /** Creates a new session and a corresponding logDialog */
    BlisClient.prototype.StartSession = function (appId) {
        var _this = this;
        var apiPath = "app/" + appId + "/session";
        return new Promise(function (resolve, reject) {
            var requestData = {
                url: _this.MakeURL(apiPath),
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                body: {},
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("POST", apiPath, requestData);
            Request.post(requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    var session = new blis_models_1.Session(body);
                    resolve(session);
                }
            });
        });
    };
    /** Retrieves information about the specified session */
    BlisClient.prototype.GetSession = function (appId, sessionId) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var apiPath = "app/" + appId + "/session/" + sessionId;
            var requestData = {
                url: _this.MakeURL(apiPath),
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("GET", apiPath, requestData);
            Request.get(requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    var session = new blis_models_1.Session(body);
                    session.sessionId = sessionId;
                    resolve(session);
                }
            });
        });
    };
    /** Runs entity extraction (prediction). */
    BlisClient.prototype.SessionExtract = function (appId, sessionId, userInput) {
        var _this = this;
        var apiPath = "app/" + appId + "/session/" + sessionId + "/extractor";
        // Always retrieve entity list
        var query = "includeDefinitions=true";
        return new Promise(function (resolve, reject) {
            var requestData = {
                url: _this.MakeURL(apiPath, query),
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                body: userInput,
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("PUT", apiPath, requestData);
            Request.put(requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    var extractResponse = new blis_models_1.ExtractResponse(body);
                    resolve(extractResponse);
                }
            });
        });
    };
    /** Take a turn and returns chosen action */
    BlisClient.prototype.SessionScore = function (appId, sessionId, scorerInput) {
        var _this = this;
        var apiPath = "app/" + appId + "/session/" + sessionId + "/scorer";
        return new Promise(function (resolve, reject) {
            var requestData = {
                url: _this.MakeURL(apiPath),
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                body: scorerInput,
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("PUT", apiPath, requestData);
            Request.put(requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    var score = new blis_models_1.ScoreResponse(body);
                    resolve(score);
                }
            });
        });
    };
    /** End a session. */
    BlisClient.prototype.EndSession = function (appId, sessionId, query) {
        var _this = this;
        var apiPath = "app/" + appId + "/session/" + sessionId;
        return new Promise(function (resolve, reject) {
            var url = _this.MakeURL(apiPath, query);
            var requestData = {
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("DELETE", apiPath, requestData);
            Request.delete(url, requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    resolve(body);
                }
            });
        });
    };
    /** Retrieves definitions of ALL open sessions
     * To retrieve just the IDs, see the GetSessionIds method */
    BlisClient.prototype.GetSessions = function (appId, query) {
        var _this = this;
        var apiPath = "app/" + appId + "/sessions";
        return new Promise(function (resolve, reject) {
            var requestData = {
                url: _this.MakeURL(apiPath, query),
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("GET", apiPath, requestData);
            Request.get(requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    var sessions = new blis_models_1.SessionList(body);
                    resolve(sessions);
                }
            });
        });
    };
    /** Retrieves a list of session IDs
     * To retrieve the definitions, see the GetSessions method */
    BlisClient.prototype.GetSessionIds = function (appId, query) {
        var _this = this;
        var apiPath = "app/" + appId + "/session";
        return new Promise(function (resolve, reject) {
            var requestData = {
                url: _this.MakeURL(apiPath, query),
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("GET", apiPath, requestData);
            Request.get(requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    var sessionIds = new blis_models_1.SessionIdList(body);
                    resolve(sessionIds);
                }
            });
        });
    };
    //=============================================================================
    // Teach
    //=============================================================================
    /** Creates a new teaching session and a corresponding trainDialog */
    BlisClient.prototype.StartTeach = function (appId) {
        var _this = this;
        var apiPath = "app/" + appId + "/teach";
        return new Promise(function (resolve, reject) {
            var requestData = {
                url: _this.MakeURL(apiPath),
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                body: {},
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("POST", apiPath, requestData);
            Request.post(requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    var teachResponse = new blis_models_1.TeachResponse(body);
                    resolve(teachResponse);
                }
            });
        });
    };
    /** Retrieves information about the specified teach */
    BlisClient.prototype.GetTeach = function (appId, teachId) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var apiPath = "app/" + appId + "/teach/" + teachId;
            var requestData = {
                url: _this.MakeURL(apiPath),
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("GET", apiPath, requestData);
            Request.get(requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    var teach = new blis_models_1.Teach(body);
                    teach.teachId = teachId;
                    resolve(teach);
                }
            });
        });
    };
    /** Runs entity extraction (prediction).
     * If a more recent version of the package is available on
     * the server, the session will first migrate to that newer version.  This
     * doesn't affect the trainDialog maintained.
     */
    BlisClient.prototype.TeachExtract = function (appId, teachId, userInput) {
        var _this = this;
        var apiPath = "app/" + appId + "/teach/" + teachId + "/extractor";
        // Always retrieve entity list
        var query = "includeDefinitions=true";
        return new Promise(function (resolve, reject) {
            var requestData = {
                url: _this.MakeURL(apiPath, query),
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                body: { text: userInput.text },
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("PUT", apiPath, requestData);
            Request.put(requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    var extractResponse = new blis_models_1.ExtractResponse(body);
                    resolve(extractResponse);
                }
            });
        });
    };
    /** Uploads a labeled entity extraction instance
     * ie "commits" an entity extraction label, appending it to the teach session's
     * trainDialog, and advancing the dialog. This may yield produce a new package.
     */
    BlisClient.prototype.TeachExtractFeedback = function (appId, teachId, extractorStep) {
        var _this = this;
        var apiPath = "app/" + appId + "/teach/" + teachId + "/extractor";
        return new Promise(function (resolve, reject) {
            var requestData = {
                url: _this.MakeURL(apiPath),
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                body: extractorStep,
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("POST", apiPath, requestData);
            Request.post(requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    var teachResponse = new blis_models_1.TeachResponse(body);
                    resolve(teachResponse);
                }
            });
        });
    };
    /** Takes a turn and return distribution over actions.
     * If a more recent version of the package is
     * available on the server, the session will first migrate to that newer version.
     * This doesn't affect the trainDialog maintained by the teaching session.
     */
    BlisClient.prototype.TeachScore = function (appId, teachId, scorerInput) {
        var _this = this;
        var apiPath = "app/" + appId + "/teach/" + teachId + "/scorer";
        return new Promise(function (resolve, reject) {
            var requestData = {
                url: _this.MakeURL(apiPath),
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                body: scorerInput,
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("PUT", apiPath, requestData);
            Request.put(requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    var scoreResponse = new blis_models_1.ScoreResponse(body);
                    resolve(scoreResponse);
                }
            });
        });
    };
    /** Uploads a labeled scorer step instance
     * – ie "commits" a scorer label, appending it to the teach session's
     * trainDialog, and advancing the dialog. This may yield produce a new package.
     */
    BlisClient.prototype.TeachScoreFeedback = function (appId, teachId, scorerResponse) {
        var _this = this;
        var apiPath = "app/" + appId + "/teach/" + teachId + "/scorer";
        return new Promise(function (resolve, reject) {
            var requestData = {
                url: _this.MakeURL(apiPath),
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                body: scorerResponse,
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("POST", apiPath, requestData);
            Request.post(requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    var teachResponse = new blis_models_1.TeachResponse(body);
                    resolve(teachResponse);
                }
            });
        });
    };
    /** Ends a teach.
     * For Teach sessions, does NOT delete the associated trainDialog.
     * To delete the associated trainDialog, call DELETE on the trainDialog.
     */
    BlisClient.prototype.EndTeach = function (appId, teachId, query) {
        var _this = this;
        var apiPath = "app/" + appId + "/teach/" + teachId;
        return new Promise(function (resolve, reject) {
            var url = _this.MakeURL(apiPath, query);
            var requestData = {
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("DELETE", apiPath, requestData);
            Request.delete(url, requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    var trainResponse = new blis_models_1.TrainResponse(body);
                    resolve(trainResponse);
                }
            });
        });
    };
    /** Retrieves definitions of ALL teaching sessions
     * To retrieve just the IDs, see the GetTeachIds method */
    BlisClient.prototype.GetTeaches = function (appId, query) {
        var _this = this;
        var apiPath = "app/" + appId + "/teaches";
        return new Promise(function (resolve, reject) {
            var requestData = {
                url: _this.MakeURL(apiPath, query),
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("GET", apiPath, requestData);
            Request.get(requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    var teaches = new blis_models_1.TeachList(body);
                    resolve(teaches);
                }
            });
        });
    };
    /** Retrieves a list of teach session IDs
     * To retrieve the definitions, see the GetTeaches method */
    BlisClient.prototype.GetTeachIds = function (appId, query) {
        var _this = this;
        var apiPath = "app/" + appId + "/teach";
        return new Promise(function (resolve, reject) {
            var requestData = {
                url: _this.MakeURL(apiPath, query),
                headers: {
                    'Cookie': _this.credentials.Cookiestring()
                },
                json: true
            };
            BlisDebug_1.BlisDebug.LogRequest("GET", apiPath, requestData);
            Request.get(requestData, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else if (response.statusCode >= 300) {
                    reject(response);
                }
                else {
                    var teachIds = new blis_models_1.TeachIdList(body);
                    resolve(teachIds);
                }
            });
        });
    };
    return BlisClient;
}());
exports.BlisClient = BlisClient;
//# sourceMappingURL=BlisClient.js.map