"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var BlisDebug_1 = require("./BlisDebug");
var BotMemory_1 = require("./Memory/BotMemory");
var BotState_1 = require("./Memory/BotState");
var blis_models_1 = require("blis-models");
var Redis = require("redis");
var BlisMemory = (function () {
    function BlisMemory(userkey) {
        this.userkey = userkey;
        this.memCache = {};
    }
    BlisMemory.Init = function (redisServer, redisKey) {
        this.redisClient = Redis.createClient(6380, redisServer, { auth_pass: redisKey, tls: { servername: redisServer } });
        this.redisClient.on('error', function (err) {
            BlisDebug_1.BlisDebug.Error(err, "Redis");
        });
        console.log("Redis client created...");
    };
    BlisMemory.GetMemory = function (key) {
        return new BlisMemory(key);
    };
    // Generate memory key from session
    BlisMemory.InitMemory = function (session) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var user, userdata, key, memory;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        user = session.message.address.user;
                        userdata = { id: user.id, name: user.name };
                        key = blis_models_1.KeyGen.MakeKey(JSON.stringify(userdata));
                        console.log("-> blismem");
                        memory = new BlisMemory(key);
                        console.log("-> setaddy");
                        return [4 /*yield*/, memory.BotState.SetAddress(session.message.address)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, memory];
                }
            });
        });
    };
    BlisMemory.prototype.Key = function (datakey) {
        return this.userkey + "_" + datakey;
    };
    BlisMemory.prototype.GetAsync = function (datakey) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var that, key, cacheData;
            return tslib_1.__generator(this, function (_a) {
                if (!BlisMemory.redisClient) {
                    throw new Error("Redis client not found");
                }
                that = this;
                key = this.Key(datakey);
                cacheData = this.memCache[key];
                if (cacheData) {
                    return [2 /*return*/, new Promise(function (resolve, reject) {
                            BlisDebug_1.BlisDebug.Log("-< " + key + " : " + cacheData, 'memverbose');
                            resolve(cacheData);
                        })];
                }
                ;
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        BlisMemory.redisClient.get(key, function (err, data) {
                            if (err !== null)
                                return reject(err);
                            that.memCache[key] = data;
                            BlisDebug_1.BlisDebug.Log("R< " + key + " : " + data, 'memory');
                            resolve(data);
                        });
                    })];
            });
        });
    };
    BlisMemory.prototype.SetAsync = function (datakey, value) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var that, key;
            return tslib_1.__generator(this, function (_a) {
                if (!BlisMemory.redisClient) {
                    throw new Error("Redis client not found");
                }
                if (value == null) {
                    return [2 /*return*/, this.DeleteAsync(datakey)];
                }
                that = this;
                key = this.Key(datakey);
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        try {
                            // First check mem cache to see if anything has changed, if not, can skip write
                            var cacheData = that.memCache[key];
                            if (cacheData == value) {
                                BlisDebug_1.BlisDebug.Log("-> " + key + " : " + value, 'memverbose');
                                resolve("Cache");
                            }
                            else {
                                // Write to redis cache
                                BlisMemory.redisClient.set(key, value, function (err, data) {
                                    if (err !== null)
                                        return reject(err);
                                    that.memCache[key] = value;
                                    BlisDebug_1.BlisDebug.Log("W> " + key + " : " + value, 'memory');
                                    resolve(data);
                                });
                            }
                        }
                        catch (err) {
                            BlisDebug_1.BlisDebug.Error(err);
                            reject(err);
                        }
                    })];
            });
        });
    };
    BlisMemory.prototype.DeleteAsync = function (datakey) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var that, key;
            return tslib_1.__generator(this, function (_a) {
                that = this;
                key = this.Key(datakey);
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        try {
                            // First check mem cache to see if already null, if not, can skip write
                            var cacheData = that.memCache[key];
                            if (!cacheData) {
                                BlisDebug_1.BlisDebug.Log("-> " + key + " : -----", 'memverbose');
                                resolve("Cache");
                            }
                            else {
                                BlisMemory.redisClient.del(key, function (err, data) {
                                    if (err !== null)
                                        return reject(err);
                                    that.memCache[key] = null;
                                    BlisDebug_1.BlisDebug.Log("D> " + key + " : -----", 'memory');
                                    resolve(data);
                                });
                            }
                        }
                        catch (err) {
                            BlisDebug_1.BlisDebug.Error(err);
                            reject(err);
                        }
                    })];
            });
        });
    };
    BlisMemory.prototype.Get = function (datakey, cb) {
        var _this = this;
        try {
            var key_1 = this.Key(datakey);
            var cacheData = this.memCache[key_1];
            if (cacheData) {
                BlisDebug_1.BlisDebug.Log("-] " + key_1 + " : " + cacheData, 'memverbose');
                cb(null, cacheData);
            }
            BlisMemory.redisClient.get(key_1, function (err, data) {
                if (!err) {
                    _this.memCache[key_1] = data;
                }
                BlisDebug_1.BlisDebug.Log("R] " + key_1 + " : " + data, 'memory');
                cb(err, data);
            });
        }
        catch (err) {
            BlisDebug_1.BlisDebug.Error(err);
            cb(err, null);
        }
    };
    BlisMemory.prototype.Init = function (appId) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.BotState.Clear(appId)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.BotMemory.Clear()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /** Clear memory associated with a session */
    BlisMemory.prototype.EndSession = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.BotState.SetSession(null, false)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.BotMemory.Clear()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /** Init memory for a session */
    BlisMemory.prototype.StartSession = function (sessionId, inTeach) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.BotState.SetSession(sessionId, inTeach)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.BotMemory.Clear()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(BlisMemory.prototype, "BotMemory", {
        get: function () {
            return BotMemory_1.BotMemory.Get(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BlisMemory.prototype, "BotState", {
        get: function () {
            return BotState_1.BotState.Get(this);
        },
        enumerable: true,
        configurable: true
    });
    BlisMemory.redisClient = null;
    return BlisMemory;
}());
exports.BlisMemory = BlisMemory;
//# sourceMappingURL=BlisMemory.js.map